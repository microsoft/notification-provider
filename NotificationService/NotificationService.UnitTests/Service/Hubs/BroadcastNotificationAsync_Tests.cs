// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Service.Hubs_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using Moq;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Graph;
    using NotificationService.Contracts.Models.Web.Response;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref="NotificationsHubBaseTest" />
    [ExcludeFromCodeCoverage]
    public class BroadcastNotificationAsync_Tests : NotificationsHubBaseTest
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Broadcasts the notification asynchronously with null notification.
        /// </summary>
        [Test]
        public void BroadcastNotificationAsync_WithNullNotification()
        {
            var ex = Assert.ThrowsAsync<ArgumentNullException>(async () => await this.notificationsHub.BroadcastNotificationAsync(null));
            Assert.IsTrue(ex.ParamName.Equals("notification", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Broadcasts the notification asynchronously with valid notification.
        /// </summary>
        [Test]
        public async Task BroadcastNotificationAsync_WithValidNotification()
        {
            WebNotification webNotification = new WebNotification
            {
                NotificationId = Guid.NewGuid().ToString(),
                Title = "Test Title",
                Body = "Test Body",
                PublishOnUTCDate = DateTime.UtcNow.AddDays(-1),
                ExpiresOnUTCDate = DateTime.UtcNow.AddDays(1),
                ReadStatus = NotificationReadStatus.Read,
                Recipient = new Person
                {
                    Name = "Test Reciver",
                    Email = "abc@xyz.com",
                    ObjectIdentifier = Guid.NewGuid().ToString(),
                },
            };
            _ = this.clientMock.Setup(cli => cli.ReceiveNotificationsAsync(It.IsAny<IEnumerable<WebNotification>>())).Returns(Task.CompletedTask);
            await this.notificationsHub.BroadcastNotificationAsync(webNotification);
            Assert.IsTrue(this.loggerMock.Invocations.Count == 2);
        }
    }
}
