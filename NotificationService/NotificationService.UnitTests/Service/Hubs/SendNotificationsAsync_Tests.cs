// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Service.Hubs_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using Moq;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Graph;
    using NotificationService.Contracts.Models.Web.Response;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref="NotificationsHubBaseTest" />
    [ExcludeFromCodeCoverage]
    public class SendNotificationsAsync_Tests : NotificationsHubBaseTest
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Sends the notifications asynchronous with invalid user identifier.
        /// </summary>
        /// <param name="userIdentifier">The user identifier.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void SendNotificationsAsync_WithInvalidUserIdentifier(string userIdentifier)
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.notificationsHub.SendNotificationsAsync(userIdentifier, new List<WebNotification>()));
            Assert.IsTrue(ex.Message.StartsWith("Invalid user identifier.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Sends the notifications asynchronously with null notifications.
        /// </summary>
        [Test]
        public void SendNotificationsAsync_WithNullNotifications()
        {
            var ex = Assert.ThrowsAsync<ArgumentNullException>(async () => await this.notificationsHub.SendNotificationsAsync(Guid.NewGuid().ToString(), notifications: null));
            Assert.IsTrue(ex.ParamName.Equals("notifications", StringComparison.Ordinal));
        }

        /// <summary>
        /// Sends the notifications asynchronously with empty notifications.
        /// </summary>
        [Test]
        public async Task SendNotificationsAsync_WithEmptyNotifications()
        {
            await this.notificationsHub.SendNotificationsAsync(Guid.NewGuid().ToString(), new List<WebNotification>());
            Assert.IsTrue(this.loggerMock.Invocations.Count == 3);
        }

        /// <summary>
        /// Sends the notifications asynchronously with valid input.
        /// </summary>
        [Test]
        public async Task SendNotificationsAsync_WithValidInput()
        {
            IEnumerable<WebNotification> webNotifications = new List<WebNotification>
            {
                new WebNotification
                {
                    NotificationId = Guid.NewGuid().ToString(),
                    Title = "Test Title",
                    Body = "Test Body",
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-1),
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(1),
                    ReadStatus = NotificationReadStatus.Read,
                    Recipient = new Person
                    {
                        Name = "Test Reciver",
                        Email = "abc@xyz.com",
                        ObjectIdentifier = Guid.NewGuid().ToString(),
                    },
                },
            };
            _ = this.clientMock.Setup(cli => cli.ReceiveNotificationsAsync(It.IsAny<IEnumerable<WebNotification>>())).Returns(Task.CompletedTask);
            await this.notificationsHub.SendNotificationsAsync(Guid.NewGuid().ToString(), webNotifications);
            Assert.IsTrue(this.loggerMock.Invocations.Count == 3);
        }
    }
}
